parametric_shapes::createQuad(float const width, float const height,
                              unsigned int const horizontal_split_count,
                              unsigned int const vertical_split_count)
{
	//auto const vertices = std::array<glm::vec3, 4>{
	//	glm::vec3(0.0f,  0.0f,   0.0f),
	//	glm::vec3(width, 0.0f,   0.0f),
	//	glm::vec3(width, height, 0.0f),
	//	glm::vec3(0.0f,  height, 0.0f)
	//}; //xy-plane

	auto const horizontal_slice_edges_count = horizontal_split_count;
	auto const vertical_slice_edges_count = vertical_split_count;
	auto const horizontal_slice_vertices_count = horizontal_slice_edges_count + 1u;
	auto const vertical_slice_vertices_count = vertical_slice_edges_count + 1u;
	auto const vertices_nb = horizontal_slice_vertices_count * vertical_slice_vertices_count;

	auto vertices = std::vector<glm::vec3>(vertices_nb);
	auto normals = std::vector<glm::vec3>(vertices_nb);
	auto texcoords = std::vector<glm::vec3>(vertices_nb);
	auto tangents = std::vector<glm::vec3>(vertices_nb);
	auto binormals = std::vector<glm::vec3>(vertices_nb);
	float const d_horizon = width / (static_cast<float>(horizontal_slice_edges_count));
	float const d_vertical = height / (static_cast<float>(vertical_slice_edges_count));
	// generate vertices iteratively
	size_t index = 0u;
	// create index array

		//LogError("parametric_shapes::createQuad() does not support tesselation.");
		//return data;
		for (unsigned int i = 0u; i < horizontal_slice_vertices_count; ++i) {

			//float distance_to_centre = radius;
			for (unsigned int j = 0u; j < vertical_slice_vertices_count; ++j) {
				// vertex
				vertices[index] = glm::vec3(static_cast<float>(i) * d_horizon, 0.0f, static_cast<float>(j) * d_vertical);

				// texture coordinates
				texcoords[index] = glm::vec3(static_cast<float>(j) / (static_cast<float>(horizontal_slice_vertices_count)), 0.0f,
					static_cast<float>(i) / (static_cast<float>(vertical_slice_vertices_count)));

				auto const t = glm::vec3(1.0f, 0.0f, 0.0f);
				tangents[index] = t;

				// binormal
				auto const b = glm::vec3(0.0f, 0.0f, 1.0f);
				binormals[index] = b;

				// normal
				auto const n = glm::vec3(0.0f, 1.0f, 0.0f);
				normals[index] = n;
				++index;
			}
		}

		auto index_sets = std::vector<glm::uvec3>(2u * horizontal_slice_vertices_count * vertical_slice_vertices_count);
		// generate indices iteratively
		index = 0u;
		for (unsigned int i = 0u; i < horizontal_slice_edges_count; ++i)
		{
			for (unsigned int j = 0u; j < vertical_slice_edges_count; ++j)
			{
				index_sets[index] = glm::uvec3(vertical_slice_vertices_count * (i + 0u) + (j + 0u),
												vertical_slice_vertices_count * (i + 1u) + (j + 0u),
												vertical_slice_vertices_count * (i + 0u) + (j + 1u));
				++index;

				index_sets[index] = glm::uvec3(vertical_slice_vertices_count * (i + 1u) + (j + 0u),
												vertical_slice_vertices_count * (i + 1u) + (j + 1u),
												vertical_slice_vertices_count * (i + 0u) + (j + 1u));
				++index;
			}
		}

		bonobo::mesh_data data;
		glGenVertexArrays(1, &data.vao);
		assert(data.vao != 0u);
		glBindVertexArray(data.vao);

	auto const vertices_offset = 0u;
	auto const vertices_size = static_cast<GLsizeiptr>(vertices.size() * sizeof(glm::vec3));
	auto const normals_offset = vertices_size;
	auto const normals_size = static_cast<GLsizeiptr>(normals.size() * sizeof(glm::vec3));
	auto const texcoords_offset = normals_offset + normals_size;
	auto const texcoords_size = static_cast<GLsizeiptr>(texcoords.size() * sizeof(glm::vec3));
	auto const tangents_offset = texcoords_offset + texcoords_size;
	auto const tangents_size = static_cast<GLsizeiptr>(tangents.size() * sizeof(glm::vec3));
	auto const binormals_offset = tangents_offset + tangents_size;
	auto const binormals_size = static_cast<GLsizeiptr>(binormals.size() * sizeof(glm::vec3));
	auto const bo_size = static_cast<GLsizeiptr>(vertices_size
		+ normals_size
		+ texcoords_size
		+ tangents_size
		+ binormals_size
		);
	glGenBuffers(1, &data.bo);
	assert(data.bo != 0u);
	glBindBuffer(GL_ARRAY_BUFFER, data.bo);
	glBufferData(GL_ARRAY_BUFFER, bo_size, nullptr, GL_STATIC_DRAW);

	glBufferSubData(GL_ARRAY_BUFFER, vertices_offset, vertices_size, static_cast<GLvoid const*>(vertices.data()));
	glEnableVertexAttribArray(static_cast<unsigned int>(bonobo::shader_bindings::vertices));
	glVertexAttribPointer(static_cast<unsigned int>(bonobo::shader_bindings::vertices), 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<GLvoid const*>(0x0));

	glBufferSubData(GL_ARRAY_BUFFER, normals_offset, normals_size, static_cast<GLvoid const*>(normals.data()));
	glEnableVertexAttribArray(static_cast<unsigned int>(bonobo::shader_bindings::normals));
	glVertexAttribPointer(static_cast<unsigned int>(bonobo::shader_bindings::normals), 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<GLvoid const*>(normals_offset));

	glBufferSubData(GL_ARRAY_BUFFER, texcoords_offset, texcoords_size, static_cast<GLvoid const*>(texcoords.data()));
	glEnableVertexAttribArray(static_cast<unsigned int>(bonobo::shader_bindings::texcoords));
	glVertexAttribPointer(static_cast<unsigned int>(bonobo::shader_bindings::texcoords), 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<GLvoid const*>(texcoords_offset));

	glBufferSubData(GL_ARRAY_BUFFER, tangents_offset, tangents_size, static_cast<GLvoid const*>(tangents.data()));
	glEnableVertexAttribArray(static_cast<unsigned int>(bonobo::shader_bindings::tangents));
	glVertexAttribPointer(static_cast<unsigned int>(bonobo::shader_bindings::tangents), 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<GLvoid const*>(tangents_offset));

	glBufferSubData(GL_ARRAY_BUFFER, binormals_offset, binormals_size, static_cast<GLvoid const*>(binormals.data()));
	glEnableVertexAttribArray(static_cast<unsigned int>(bonobo::shader_bindings::binormals));
	glVertexAttribPointer(static_cast<unsigned int>(bonobo::shader_bindings::binormals), 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<GLvoid const*>(binormals_offset));

	glBindBuffer(GL_ARRAY_BUFFER, 0u);

	data.indices_nb = static_cast<GLsizei>(index_sets.size() * 3u);
	glGenBuffers(1, &data.ibo);
	assert(data.ibo != 0u);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, data.ibo);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, static_cast<GLsizeiptr>(index_sets.size() * sizeof(glm::uvec3)), reinterpret_cast<GLvoid const*>(index_sets.data()), GL_STATIC_DRAW);

	glBindVertexArray(0u);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0u);

	return data;
}